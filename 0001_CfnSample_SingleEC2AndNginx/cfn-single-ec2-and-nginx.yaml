################################################################################
#
#  0001
#  * EC2 Instance x 1 に nginx をインストールしてインターネット経由でアクセスできるようにする
#  * /var/log/messages, /var/log/nginx/access.log を CloudWatchLogs に転送する
#
AWSTemplateFormatVersion: 2010-09-09
Description: Single EC2 and nginx

Parameters:
  ServiceName:
    Type: String
    Default: ksby
    Description: Service Name
  KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: KeyPair Name

Mappings:
  StackConfig:
    VPC:
      CIDR: 10.0.0.0/16
    PublicSubnetA:
      CIDR: 10.0.0.0/24
      AvailabilityZoneIndex: 1  # 東京リージョンでは ap-northeast-1b
    EC2:
      InstanceType: t3.nano
      ImageId: ami-06962fe7164c1fe7b

Resources:
  #########################
  # VPC
  #########################
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [ StackConfig, VPC, CIDR ]
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref ServiceName, "vpc" ] ]

  #########################
  # Subnet
  #########################
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - Fn::FindInMap: [ StackConfig, PublicSubnetA, AvailabilityZoneIndex ]
        - Fn::GetAZs: !Ref "AWS::Region"
      CidrBlock: !FindInMap [ StackConfig, PublicSubnetA, CIDR ]
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref ServiceName, "a-subnet-public" ] ]

  #########################
  # InternetGateway
  #########################
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref ServiceName, "inetgw" ] ]
  AttatchGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  #########################
  # RouteTable
  #########################
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref ServiceName, "routetable-public" ] ]
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttatchGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway
  AssociatePublicRouteTableToPublicSubnetA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA

  #########################
  # IAM Role
  #########################
  LogRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: LogRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:Create*
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*:*:*
  EC2WebInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - Ref: LogRole

  #########################
  # CloudWatchLogs
  #########################
  # RetentionInDays に指定可能な値は
  # https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutRetentionPolicy.html
  # を見ること
  MessagesLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /var/log/messages
      RetentionInDays: 7
  NginxAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /var/log/nginx/access.log
      RetentionInDays: 30

  #########################
  # EC2 Web
  #########################
  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join [ "-", [ !Ref ServiceName, "sg-web" ] ]
      GroupDescription: Web EC2 Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - Description: ssh
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 22
          ToPort: 22
        - Description: http
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref ServiceName, "sg-web" ] ]
  EC2WebA:
    Type: AWS::EC2::Instance
    Metadata:
      Comment: config awslog
      AWS::CloudFormation::Init:
        config:
          files:
            "/etc/awslogs/awscli.conf":
              content: !Sub |
                [plugins]
                cwlogs = cwlogs
                [default]
                region = ${AWS::Region}
              mode: '000600'
              owner: root
              group: root
            "/etc/awslogs/awslogs.conf":
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state

                [/var/log/messages]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/messages
                buffer_duration = 5000
                log_stream_name = {instance_id}
                initial_position = start_of_file
                log_group_name = /var/log/messages

                [/var/log/nginx/access.log]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/nginx/access.log
                buffer_duration = 5000
                log_stream_name = {instance_id}
                initial_position = start_of_file
                log_group_name = ${NginxAccessLogGroup}
              mode: "000644"
              owner: "root"
              group: "root"
    Properties:
      InstanceType: !FindInMap [ StackConfig, EC2, InstanceType ]
      KeyName: !Ref KeyPair
      ImageId: !FindInMap [ StackConfig, EC2, ImageId ]
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !Ref WebSecurityGroup
          SubnetId: !Ref PublicSubnetA
      IamInstanceProfile: !Ref EC2WebInstanceProfile
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash
            function error_exit {
              /opt/aws/bin/cfn-signal -e 1 -r $1 --stack ${AWS::StackId} --resource EC2WebA --region ${AWS::Region}
              exit 1
            }

            yum update -y

            timedatectl status
            timedatectl set-timezone Asia/Tokyo || error_exit "Failed to run timedatectl set-timezone"

            localectl status
            localectl set-locale LANG=ja_JP.UTF-8 || error_exit "Failed to run localectl set-locale"
            localectl set-keymap jp106 || error_exit "Failed to run localectl set-keymap"

            amazon-linux-extras install nginx1.12 -y || error_exit "Failed to run amazon-linux-extras install nginx1.12"
            systemctl start nginx || error_exit "Failed to run systemctl start nginx"
            systemctl enable nginx || error_exit "Failed to run systemctl enable nginx"

            yum update aws-cfn-bootstrap -y || error_exit "Failed to run yum update aws-cfn-bootstrap"
            yum install awslogs -y || error_exit "Failed to run yum install awslogs"
            /opt/aws/bin/cfn-init -s ${AWS::StackId} -r EC2WebA --region ${AWS::Region} || error_exit "Failed to run cfn-init"
            systemctl start awslogsd || error_exit "Failed to run systemctl start awslogsd"
            systemctl enable awslogsd || error_exit "Failed to run systemctl enable awslogsd"

            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource EC2WebA --region ${AWS::Region}
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref ServiceName, "a-web-ec2" ] ]
