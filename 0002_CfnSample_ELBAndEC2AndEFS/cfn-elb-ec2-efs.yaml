################################################################################
#
#  0002
#  * ELB + EC2 Instance x 2(ngnx) + EFS
#
AWSTemplateFormatVersion: 2010-09-09
Description: ELB + EC2 x 2 + EFS

Parameters:
  ServiceName:
    Type: String
    Default: ksby
    Description: Service Name
  KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: KeyPair Name

Mappings:
  StackConfig:
    VPC:
      CIDR: 10.0.0.0/16
    PublicSubnetA:
      CIDR: 10.0.0.0/24
      AvailabilityZoneIndex: 1  # 東京リージョンでは ap-northeast-1b
    PublicSubnetB:
      CIDR: 10.0.1.0/24
      AvailabilityZoneIndex: 2  # 東京リージョンでは ap-northeast-1c
    EC2:
      InstanceType: t2.small
      ImageId: ami-04d3eb2e1993f679b

Resources:
  #########################
  # VPC
  #########################
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [ StackConfig, VPC, CIDR ]
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref ServiceName, "vpc" ] ]

  #########################
  # Subnet
  #########################
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - Fn::FindInMap: [ StackConfig, PublicSubnetA, AvailabilityZoneIndex ]
        - Fn::GetAZs: !Ref "AWS::Region"
      CidrBlock: !FindInMap [ StackConfig, PublicSubnetA, CIDR ]
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref ServiceName, "a-subnet-public" ] ]
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - Fn::FindInMap: [ StackConfig, PublicSubnetB, AvailabilityZoneIndex ]
        - Fn::GetAZs: !Ref "AWS::Region"
      CidrBlock: !FindInMap [ StackConfig, PublicSubnetB, CIDR ]
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref ServiceName, "b-subnet-public" ] ]

  #########################
  # InternetGateway
  #########################
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref ServiceName, "inetgw" ] ]
  AttatchGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  #########################
  # RouteTable
  #########################
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref ServiceName, "routetable-public" ] ]
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttatchGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway
  AssociatePublicRouteTableToPublicSubnetA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA
  AssociatePublicRouteTableToPublicSubnetB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB

  #########################
  # IAM Role
  #########################
  LogRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: LogRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - logs:Create*
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - arn:aws:logs:*:*:*
  EC2WebInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - Ref: LogRole

  #########################
  # S3 Bucket
  #########################
  LogsS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: "logs-ksby"
      LifecycleConfiguration:
        Rules:
          - Id: DeleteRule
            Status: Enabled
            ExpirationInDays: 30
  LogsS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: LogsS3Bucket
    Properties:
      Bucket: !Ref LogsS3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - s3:PutObject
            Effect: Allow
            Resource:
              - !Sub "arn:aws:s3:::${LogsS3Bucket}/*"
            Principal:
              AWS:
                # 582318560864 は ap-northeast-1(アジアパシフィック (東京)) の Elastic Load Balancing アカウント ID
                # https://docs.aws.amazon.com/ja_jp/elasticloadbalancing/latest/classic/enable-access-logs.html
                - arn:aws:iam::582318560864:root

  #########################
  # CloudWatchLogs
  #########################
  # RetentionInDays に指定可能な値は
  # https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutRetentionPolicy.html
  # を見ること
  MessagesLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /var/log/messages
      RetentionInDays: 7
  NginxAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /var/log/nginx/access.log
      RetentionInDays: 30

  #########################
  # Public ELB
  #########################
  PublicELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join [ "-", [ !Ref ServiceName, "sg-elb-public" ] ]
      GroupDescription: Public ELB Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - Description: http
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref ServiceName, "sg-elb-public" ] ]
  PublicELB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        # ELB のログは S3 Bucket の下に日付毎に
        # logs-ksby/AWSLogs/446693287859/elasticloadbalancing/ap-northeast-1/2018/10/14/
        # 446693287859_elasticloadbalancing_ap-northeast-1_app.ksby-elb-public.16a9a099a6ba262d_20181014T0135Z_54.64.73.27_4okjntko.log.gz
        # のような感じで 5分毎に .log.gz ファイルが作成される。
        # ただしアクセスが全くない時には作成されない。
        - Key: access_logs.s3.enabled
          Value: true
        - Key: access_logs.s3.bucket
          Value: logs-ksby
      Name: !Join [ "-", [ !Ref ServiceName, "elb-public" ] ]
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      SecurityGroups:
        - !Ref PublicELBSecurityGroup
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref ServiceName, "elb-public" ] ]
  PublicELBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Join [ "-", [ !Ref ServiceName, "tg-elb-public" ] ]
      Port: 80
      Protocol: HTTP
      Targets:
        - Id: !Ref EC2WebA
          Port: 80
        - Id: !Ref EC2WebB
          Port: 80
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref ServiceName, "tg-elb-public" ] ]
  PublicELBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref PublicELBTargetGroup
      LoadBalancerArn: !Ref PublicELB
      Port: 80
      Protocol: HTTP

  #########################
  # EFS
  #########################
  EFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: VPC
      GroupDescription: Security group for mount target
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '2049'
          ToPort: '2049'
          CidrIp: 0.0.0.0/0
  EFSFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      PerformanceMode: generalPurpose
      FileSystemTags:
        - Key: Name
          Value: "ksby-Web-Contents"
  MountTargetPublicSubnetA:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Ref: EFSFileSystem
      SubnetId:
        Ref: PublicSubnetA
      SecurityGroups:
        - Ref: EFSSecurityGroup
  MountTargetPublicSubnetB:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Ref: EFSFileSystem
      SubnetId:
        Ref: PublicSubnetB
      SecurityGroups:
        - Ref: EFSSecurityGroup

  #########################
  # EC2 Web
  #########################
  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join [ "-", [ !Ref ServiceName, "sg-web" ] ]
      GroupDescription: Web EC2 Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - Description: ssh
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - Description: http
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref PublicELBSecurityGroup
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref ServiceName, "sg-web" ] ]
  EC2WebA:
    Type: AWS::EC2::Instance
    Metadata:
      Comment: config awslog
      AWS::CloudFormation::Init:
        config:
          files:
            "/etc/awslogs/awscli.conf":
              content: !Sub |
                [plugins]
                cwlogs = cwlogs
                [default]
                region = ${AWS::Region}
              mode: '000600'
              owner: root
              group: root
            "/etc/awslogs/awslogs.conf":
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state

                [/var/log/messages]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/messages
                buffer_duration = 5000
                log_stream_name = {instance_id}
                initial_position = start_of_file
                log_group_name = /var/log/messages

                [/var/log/nginx/access.log]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/nginx/access.log
                buffer_duration = 5000
                log_stream_name = {instance_id}
                initial_position = start_of_file
                log_group_name = ${NginxAccessLogGroup}
              mode: "000644"
              owner: "root"
              group: "root"
    Properties:
      InstanceType: !FindInMap [ StackConfig, EC2, InstanceType ]
      KeyName: !Ref KeyPair
      ImageId: !FindInMap [ StackConfig, EC2, ImageId ]
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !Ref WebSecurityGroup
          SubnetId: !Ref PublicSubnetA
      IamInstanceProfile: !Ref EC2WebInstanceProfile
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            function error_exit {
              /opt/aws/bin/cfn-signal -e 1 -r $1 --stack ${AWS::StackId} --resource EC2WebA --region ${AWS::Region}
              exit 1
            }

            yum update -y

            timedatectl status
            timedatectl set-timezone Asia/Tokyo || error_exit "Failed to run timedatectl set-timezone"

            localectl status
            localectl set-locale LANG=ja_JP.UTF-8 || error_exit "Failed to run localectl set-locale"
            localectl set-keymap jp106 || error_exit "Failed to run localectl set-keymap"

            yum install nfs-utils -y || error_exit "Failed to run yum install nfs-utils"
            mkdir -p /usr/share/nginx/html || error_exit "Failed to run mkdir /usr/share/nginx/html"
            mount -t nfs4 -o nfsvers=4.1 ${EFSFileSystem}.efs.${AWS::Region}.amazonaws.com:/ /usr/share/nginx/html || error_exit "Failed to run mount /usr/share/nginx/html"
            chown root:root /usr/share/nginx/html || error_exit "Failed to run chown /usr/share/nginx/html"

            amazon-linux-extras install nginx1.12 -y || error_exit "Failed to run amazon-linux-extras install nginx1.12"
            systemctl start nginx || error_exit "Failed to run systemctl start nginx"
            systemctl enable nginx || error_exit "Failed to run systemctl enable nginx"

            yum update aws-cfn-bootstrap -y || error_exit "Failed to run yum update aws-cfn-bootstrap"
            yum install awslogs -y || error_exit "Failed to run yum install awslogs"
            /opt/aws/bin/cfn-init -s ${AWS::StackId} -r EC2WebA --region ${AWS::Region} || error_exit "Failed to run cfn-init"
            systemctl start awslogsd || error_exit "Failed to run systemctl start awslogsd"
            systemctl enable awslogsd || error_exit "Failed to run systemctl enable awslogsd"

            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource EC2WebA --region ${AWS::Region}
      Tags:
      - Key: Name
        Value: !Join [ "-", [ !Ref ServiceName, "a-web-ec2" ] ]
  EC2WebB:
    Type: AWS::EC2::Instance
    Metadata:
      Comment: config awslog
      AWS::CloudFormation::Init:
        config:
          files:
            "/etc/awslogs/awscli.conf":
              content: !Sub |
                [plugins]
                cwlogs = cwlogs
                [default]
                region = ${AWS::Region}
              mode: '000600'
              owner: root
              group: root
            "/etc/awslogs/awslogs.conf":
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state

                [/var/log/messages]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/messages
                buffer_duration = 5000
                log_stream_name = {instance_id}
                initial_position = start_of_file
                log_group_name = /var/log/messages

                [/var/log/nginx/access.log]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/nginx/access.log
                buffer_duration = 5000
                log_stream_name = {instance_id}
                initial_position = start_of_file
                log_group_name = ${NginxAccessLogGroup}
              mode: "000644"
              owner: "root"
              group: "root"
    Properties:
      InstanceType: !FindInMap [ StackConfig, EC2, InstanceType ]
      KeyName: !Ref KeyPair
      ImageId: !FindInMap [ StackConfig, EC2, ImageId ]
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !Ref WebSecurityGroup
          SubnetId: !Ref PublicSubnetB
      IamInstanceProfile: !Ref EC2WebInstanceProfile
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            function error_exit {
              /opt/aws/bin/cfn-signal -e 1 -r $1 --stack ${AWS::StackId} --resource EC2WebB --region ${AWS::Region}
              exit 1
            }

            yum update -y

            timedatectl status
            timedatectl set-timezone Asia/Tokyo || error_exit "Failed to run timedatectl set-timezone"

            localectl status
            localectl set-locale LANG=ja_JP.UTF-8 || error_exit "Failed to run localectl set-locale"
            localectl set-keymap jp106 || error_exit "Failed to run localectl set-keymap"

            yum install nfs-utils -y || error_exit "Failed to run yum install nfs-utils"
            mkdir -p /usr/share/nginx/html || error_exit "Failed to run mkdir /usr/share/nginx/html"
            mount -t nfs4 -o nfsvers=4.1 ${EFSFileSystem}.efs.${AWS::Region}.amazonaws.com:/ /usr/share/nginx/html || error_exit "Failed to run mount /usr/share/nginx/html"
            chown root:root /usr/share/nginx/html || error_exit "Failed to run chown /usr/share/nginx/html"

            amazon-linux-extras install nginx1.12 -y || error_exit "Failed to run amazon-linux-extras install nginx1.12"
            systemctl start nginx || error_exit "Failed to run systemctl start nginx"
            systemctl enable nginx || error_exit "Failed to run systemctl enable nginx"

            yum update aws-cfn-bootstrap -y || error_exit "Failed to run yum update aws-cfn-bootstrap"
            yum install awslogs -y || error_exit "Failed to run yum install awslogs"
            /opt/aws/bin/cfn-init -s ${AWS::StackId} -r EC2WebB --region ${AWS::Region} || error_exit "Failed to run cfn-init"
            systemctl start awslogsd || error_exit "Failed to run systemctl start awslogsd"
            systemctl enable awslogsd || error_exit "Failed to run systemctl enable awslogsd"

            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource EC2WebB --region ${AWS::Region}
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref ServiceName, "b-web-ec2" ] ]

Outputs:
  PublicELBDNSName:
    Value: !GetAtt PublicELB.DNSName
